{"version":3,"sources":["contexts/TodoListContext.js","components/NavBar.js","components/TaskDetails.js","components/TodoList.js","components/TodoListForm.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListContext","createContext","TodoListContextProvider","props","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","todoLists","setTodoList","useEffect","Provider","addTask","task","time","id","uuidv4","removeTask","filter","children","Navbar","useContext","className","length","TaskDetails","onClick","TodoList","map","TodoListForm","setTask","setTime","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5982b250.chunk.js","sourcesContent":["import React, {createContext, useState,useEffect} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid' ;\r\n\r\nexport const TodoListContext = createContext() ; // creating a context and export it \r\n\r\nconst TodoListContextProvider = (props) => {  // pass props and we use useState\r\n    const [todoLists,setTodoList] = useLocalStorage(\"tasks\",[]);\r\n    function useLocalStorage(key,initialValue){\r\n        // State to store our value\r\n        // Pass initial state function to useState so logic is only executed once\r\n        const [storedValue, setStoredValue] = useState(()=>{\r\n          try {\r\n            // Get from local storage by key\r\n            const item = window.localStorage.getItem(key);\r\n            // Parse stored json or if none return initialValue\r\n            return item ? JSON.parse(item) : initialValue;\r\n          } catch (error) {\r\n            // If error also return initialValue\r\n            console.log(error);\r\n            return initialValue;\r\n          }\r\n        });\r\n          // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\n    useEffect(()=> \r\n    {\r\n     localStorage.setItem('tasks',JSON.stringify(todoLists))\r\n    },[todoLists]) \r\n    const addTask = (task,time) => \r\n    {\r\n        setTodoList([...todoLists,{task,time,id :uuidv4()}])\r\n    }\r\n    const removeTask = (id) => \r\n    {\r\n        console.log(id) ;\r\n        setTodoList(todoLists.filter(task => task.id !== id )) // return all object that does not match the id\r\n\r\n    }\r\n    return (  \r\n       <TodoListContext.Provider value={{todoLists,addTask,removeTask}}>\r\n        {props.children}\r\n       </TodoListContext.Provider>\r\n    );\r\n}\r\n \r\nexport default TodoListContextProvider;\r\n","import React,{useContext}from 'react'\r\nimport { TodoListContext } from '../contexts/TodoListContext';\r\n\r\nconst Navbar = () => {\r\n    const {todoLists} = useContext(TodoListContext) ;\r\n    return ( \r\n        <div className=\"navbar\">\r\n            <h1>My Todo List</h1> \r\n            <p>Currently you have {todoLists.length} tasks to do</p>   \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;\r\n\r\n","import React, {useContext} from 'react' ; \r\nimport { TodoListContext } from '../contexts/TodoListContext';\r\n\r\n\r\nconst TaskDetails = ({task}) => {\r\n    const {removeTask} = useContext(TodoListContext) ;\r\n    return (  \r\n        <li onClick = { () => removeTask(task.id)}>\r\n            <div className='task'>{task.task}</div>\r\n            <div className='time'>{task.time}</div>\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default TaskDetails;\r\n\r\n","import React,{useContext} from 'react';\r\nimport { TodoListContext } from '../contexts/TodoListContext';\r\nimport TaskDetails from './TaskDetails';\r\n\r\nconst TodoList = () => {\r\n    const {todoLists} = useContext(TodoListContext) ; \r\n    return todoLists.length ? ( // if it has lenght return the tasks \r\n        <div className=\"todo-list\">\r\n            <ul>\r\n                {todoLists.map(task=>{\r\n                    return(<TaskDetails task={task} key={task.id}/>) // task is a prop       \r\n                 })}\r\n            </ul>\r\n        </div>\r\n        \r\n     ) : (  // else return something else\r\n         <div className ='emptyList'>\r\n            <h1>What do you have in mind for today ?</h1>\r\n            {console.log(todoLists)}\r\n         </div>\r\n       \r\n     )\r\n}\r\n \r\nexport default TodoList;","import React,{useContext,useState} from 'react' ; \r\nimport { TodoListContext } from '../contexts/TodoListContext';\r\n\r\nconst TodoListForm = () => {\r\n    const {addTask} = useContext(TodoListContext) ; \r\n    const [task,setTask]= useState('');\r\n    const [time,setTime]= useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault() ; \r\n        addTask(task,time) ; \r\n        setTask('') ;\r\n        setTime('');\r\n        }\r\n    return (  \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"new task\" value={task} \r\n            onChange={(e)=>setTask(e.target.value)}  required />\r\n            <input type=\"time\" value={time} onChange={(e)=>setTime(e.target.value)} \r\n            required/>   \r\n            <input type=\"submit\" value='Add task' />\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default TodoListForm;\r\n","import Navbar from \"./components/NavBar\";\nimport TodoListContextProvider from \"./contexts/TodoListContext\";\nimport TodoList from \"./components/TodoList\";\nimport TodoListForm from \"./components/TodoListForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <TodoListContextProvider>\n    <Navbar/>\n    <TodoList/>\n    <TodoListForm />\n    </TodoListContextProvider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}